#!/usr/bin/env python

import argparse
import pandas as pd
import json
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from pathlib import Path
from time import sleep, time
import threading
from rich.console import Console
from rich.table import Table

def pretty_print_dataframe(df):
    console = Console()
    table = Table(show_lines=True)
    for column in df.columns:
        table.add_column(column)
    for _, row in df.iterrows():
        table.add_row(*map(str, row))
    console.print(table)

class ConfigFileHandler(FileSystemEventHandler):
    def __init__(self, config_file, file, num_rows):
        self.config_file = Path(config_file).resolve()
        self.file = file
        self.num_rows = num_rows
        self.last_modified_time = 0
        parse_with_pandas(self.config_file, self.file, self.num_rows)
        self.lock = threading.Lock()  # Ensure thread safety

    def on_any_event(self, event):
        if Path(event.src_path).resolve() == self.config_file:
            if event.event_type in ["modified", "created", "moved"]:
                with self.lock:
                    current_time = time()
                    if current_time - self.last_modified_time > 0.5:
                        self.last_modified_time = current_time
                        print("\nConfig file changed. Reloading...\n")
                        parse_with_pandas(self.config_file, self.file, self.num_rows)



def parse_with_pandas(config_file, file, num_rows):
    with open(config_file, "r") as c_file:
        config = json.load(c_file)

    labels = []
    col_spec = []
    for key in config:
        label = key["label"]
        labels.append(label)
        start = int(key["start"]) - 1
        width = int(key["width"])
        col_spec.append((start, start + width))
    df = pd.read_fwf(file, colspecs=col_spec, nrows=num_rows, names=None)
    df.columns = labels
    pretty_print_dataframe(df)


def main():
    parser = argparse.ArgumentParser(
        description="Read file and config file paths as arguments."
    )
    parser.add_argument(
        "-f", "--file", type=str, required=True, help="Path to the file."
    )
    parser.add_argument(
        "-c", "--config", type=str, required=True, help="Path to the config file."
    )
    parser.add_argument(
        "-n", "--num-lines", type=int, required=False, help="Number of lines to display"
    )
    args = parser.parse_args()
    file = args.file
    config = args.config
    num_lines = args.num_lines or 5

    event_handler = ConfigFileHandler(config, file, num_lines)
    observer = Observer()
    observer.schedule(event_handler, path=str(Path(config).parent), recursive=False)

    observer.start()

    try:
        while True:
            sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


if __name__ == "__main__":
    main()
